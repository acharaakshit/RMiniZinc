// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// deleteItem
std::string deleteItem(int itemNo, std::string modelString, std::string mznpath, std::string modelStringName, bool updateMZN);
RcppExport SEXP _rminizinc_deleteItem(SEXP itemNoSEXP, SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modelStringNameSEXP, SEXP updateMZNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type itemNo(itemNoSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelStringName(modelStringNameSEXP);
    Rcpp::traits::input_parameter< bool >::type updateMZN(updateMZNSEXP);
    rcpp_result_gen = Rcpp::wrap(deleteItem(itemNo, modelString, mznpath, modelStringName, updateMZN));
    return rcpp_result_gen;
END_RCPP
}
// filetoString
std::string filetoString(std::string filepath);
RcppExport SEXP _rminizinc_filetoString(SEXP filepathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filepath(filepathSEXP);
    rcpp_result_gen = Rcpp::wrap(filetoString(filepath));
    return rcpp_result_gen;
END_RCPP
}
// getMissingPars
Rcpp::CharacterVector getMissingPars(std::string modelString, std::string mznpath, std::string modelStringName);
RcppExport SEXP _rminizinc_getMissingPars(SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modelStringNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelStringName(modelStringNameSEXP);
    rcpp_result_gen = Rcpp::wrap(getMissingPars(modelString, mznpath, modelStringName));
    return rcpp_result_gen;
END_RCPP
}
// modifyDomainId
std::string modifyDomainId(int ItemNo, int maxIdItem, int minIdItem, int replaceIdItem, std::string modelString, std::string mznpath, bool modify_mzn);
RcppExport SEXP _rminizinc_modifyDomainId(SEXP ItemNoSEXP, SEXP maxIdItemSEXP, SEXP minIdItemSEXP, SEXP replaceIdItemSEXP, SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modify_mznSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ItemNo(ItemNoSEXP);
    Rcpp::traits::input_parameter< int >::type maxIdItem(maxIdItemSEXP);
    Rcpp::traits::input_parameter< int >::type minIdItem(minIdItemSEXP);
    Rcpp::traits::input_parameter< int >::type replaceIdItem(replaceIdItemSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< bool >::type modify_mzn(modify_mznSEXP);
    rcpp_result_gen = Rcpp::wrap(modifyDomainId(ItemNo, maxIdItem, minIdItem, replaceIdItem, modelString, mznpath, modify_mzn));
    return rcpp_result_gen;
END_RCPP
}
// modifyDomainSetVal
std::string modifyDomainSetVal(int ItemNo, Nullable<int> imax, Nullable<int> imin, Nullable<double> fmin, Nullable<double> fmax, std::string modelString, std::string mznpath, bool modify_mzn);
RcppExport SEXP _rminizinc_modifyDomainSetVal(SEXP ItemNoSEXP, SEXP imaxSEXP, SEXP iminSEXP, SEXP fminSEXP, SEXP fmaxSEXP, SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modify_mznSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ItemNo(ItemNoSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type imin(iminSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type fmin(fminSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type fmax(fmaxSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< bool >::type modify_mzn(modify_mznSEXP);
    rcpp_result_gen = Rcpp::wrap(modifyDomainSetVal(ItemNo, imax, imin, fmin, fmax, modelString, mznpath, modify_mzn));
    return rcpp_result_gen;
END_RCPP
}
// mzn_eval
List mzn_eval(std::string solver, std::string libpath, std::string modelString, std::string mznpath, std::string dznpath, bool all_solutions);
RcppExport SEXP _rminizinc_mzn_eval(SEXP solverSEXP, SEXP libpathSEXP, SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP dznpathSEXP, SEXP all_solutionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< std::string >::type libpath(libpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type dznpath(dznpathSEXP);
    Rcpp::traits::input_parameter< bool >::type all_solutions(all_solutionsSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_eval(solver, libpath, modelString, mznpath, dznpath, all_solutions));
    return rcpp_result_gen;
END_RCPP
}
// mzn_parse
List mzn_parse(std::string modelString, std::string mznpath, std::string modelStringName);
RcppExport SEXP _rminizinc_mzn_parse(SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modelStringNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelStringName(modelStringNameSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_parse(modelString, mznpath, modelStringName));
    return rcpp_result_gen;
END_RCPP
}
// set_params
std::string set_params(List modData, std::string modelString, std::string mznpath, bool modify_mzn);
RcppExport SEXP _rminizinc_set_params(SEXP modDataSEXP, SEXP modelStringSEXP, SEXP mznpathSEXP, SEXP modify_mznSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type modData(modDataSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mznpath(mznpathSEXP);
    Rcpp::traits::input_parameter< bool >::type modify_mzn(modify_mznSEXP);
    rcpp_result_gen = Rcpp::wrap(set_params(modData, modelString, mznpath, modify_mzn));
    return rcpp_result_gen;
END_RCPP
}
// sol_parse
List sol_parse(std::string solutionString);
RcppExport SEXP _rminizinc_sol_parse(SEXP solutionStringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type solutionString(solutionStringSEXP);
    rcpp_result_gen = Rcpp::wrap(sol_parse(solutionString));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_rminizinc_deleteItem", (DL_FUNC) &_rminizinc_deleteItem, 5},
    {"_rminizinc_filetoString", (DL_FUNC) &_rminizinc_filetoString, 1},
    {"_rminizinc_getMissingPars", (DL_FUNC) &_rminizinc_getMissingPars, 3},
    {"_rminizinc_modifyDomainId", (DL_FUNC) &_rminizinc_modifyDomainId, 7},
    {"_rminizinc_modifyDomainSetVal", (DL_FUNC) &_rminizinc_modifyDomainSetVal, 8},
    {"_rminizinc_mzn_eval", (DL_FUNC) &_rminizinc_mzn_eval, 6},
    {"_rminizinc_mzn_parse", (DL_FUNC) &_rminizinc_mzn_parse, 3},
    {"_rminizinc_set_params", (DL_FUNC) &_rminizinc_set_params, 4},
    {"_rminizinc_sol_parse", (DL_FUNC) &_rminizinc_sol_parse, 1},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rminizinc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
