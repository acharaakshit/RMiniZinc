// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mzn_eval
std::string mzn_eval(std::string modelString, std::string solver, std::string libpath);
RcppExport SEXP _rminizinc_mzn_eval(SEXP modelStringSEXP, SEXP solverSEXP, SEXP libpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< std::string >::type libpath(libpathSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_eval(modelString, solver, libpath));
    return rcpp_result_gen;
END_RCPP
}
// mzn_parse
NumericVector mzn_parse(const char* modelString);
RcppExport SEXP _rminizinc_mzn_parse(SEXP modelStringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type modelString(modelStringSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_parse(modelString));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rminizinc_mzn_eval", (DL_FUNC) &_rminizinc_mzn_eval, 3},
    {"_rminizinc_mzn_parse", (DL_FUNC) &_rminizinc_mzn_parse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rminizinc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
