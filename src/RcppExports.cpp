// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mzn_eval
List mzn_eval(std::string lib_path, Rcpp::Nullable<Rcpp::Environment> r_model, std::string mzn_path, std::string model_string, std::string solver, std::string dzn_path, bool all_solutions, int time_limit);
RcppExport SEXP _rminizinc_mzn_eval(SEXP lib_pathSEXP, SEXP r_modelSEXP, SEXP mzn_pathSEXP, SEXP model_stringSEXP, SEXP solverSEXP, SEXP dzn_pathSEXP, SEXP all_solutionsSEXP, SEXP time_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type lib_path(lib_pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Environment> >::type r_model(r_modelSEXP);
    Rcpp::traits::input_parameter< std::string >::type mzn_path(mzn_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_string(model_stringSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< std::string >::type dzn_path(dzn_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type all_solutions(all_solutionsSEXP);
    Rcpp::traits::input_parameter< int >::type time_limit(time_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_eval(lib_path, r_model, mzn_path, model_string, solver, dzn_path, all_solutions, time_limit));
    return rcpp_result_gen;
END_RCPP
}
// mzn_parse
Environment mzn_parse(std::string model_string, std::string mzn_path, Nullable<std::vector<std::string>> include_path);
RcppExport SEXP _rminizinc_mzn_parse(SEXP model_stringSEXP, SEXP mzn_pathSEXP, SEXP include_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_string(model_stringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mzn_path(mzn_pathSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<std::string>> >::type include_path(include_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(mzn_parse(model_string, mzn_path, include_path));
    return rcpp_result_gen;
END_RCPP
}
// sol_parse
List sol_parse(std::string solutionString);
RcppExport SEXP _rminizinc_sol_parse(SEXP solutionStringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type solutionString(solutionStringSEXP);
    rcpp_result_gen = Rcpp::wrap(sol_parse(solutionString));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rminizinc_mzn_eval", (DL_FUNC) &_rminizinc_mzn_eval, 8},
    {"_rminizinc_mzn_parse", (DL_FUNC) &_rminizinc_mzn_parse, 3},
    {"_rminizinc_sol_parse", (DL_FUNC) &_rminizinc_sol_parse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rminizinc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
